<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 不正经的正经程序猿</title>
    <link>https://www.tylinux.com/post/</link>
    <description>Recent content in Posts on 不正经的正经程序猿</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Fri, 05 Nov 2021 18:46:09 +0800</lastBuildDate><atom:link href="https://www.tylinux.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关于光纤的一些知识收集</title>
      <link>https://www.tylinux.com/post/fiber_infomation_about_fiber/</link>
      <pubDate>Fri, 05 Nov 2021 18:46:09 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/fiber_infomation_about_fiber/</guid>
      <description>种类 铠装光缆 铠装光缆，顾名思义，是一种外部包裹了一层保护性“铠甲”的光缆，它的铠甲主要用来保护光纤线缆免受动物啃咬、湿气侵蚀或其他损害。 皮线光缆 皮线光缆多为单芯、双芯结构，也可做成四芯结构，横截面呈8字型，加强件位于两圆中心，可采用金属或非金属结构，光纤位于8字型的几何中心。皮线光缆内光纤采用G.657小弯曲半径光纤，可以以20mm的弯曲半径敷设，适合在楼内以管道方式或布明线方式入户。 跳线 vs 尾纤 光纤跳线，又称光纤连接器，是指光缆两端都装上连接器插头，用来实现光路活动连接。一端装有插头则称为光纤尾纤。 裸纤 指没有外部防护层的裸露着的光纤
接口分类 光纤连接器按连接头的结构形式可分为：FC、SC、ST、LC、D4、DIN、MU、MT-R等类型，常用的为FC、SC、ST和LC
FC 全名叫Ferrule Connector，最早应用于存储局域网络。外壳材质为金属，接口处有螺纹，和光模块连接时可以固定的很好。 ST 材质为金属，接口处为卡扣式，常用于光纤配线架 LC 材质为塑料，用于连接SFP光模块，接口可以卡在光模块上 SC 材质为塑料，推拉式连接，接口可以卡在光模块上，常用于交换机 熔接 &amp;amp;&amp;amp; 冷接 光功率及其损耗 光功率 光功率计测试用来确定光纤链路中的光功率损耗。光功率的计量单位是毫瓦（mW），更常用的光功率计量单位是dBm。下面介绍dBm单位与mW单位的换算关系。 dBm单位是测得的功率与1mW基准功率的对数比，用公式表示为： 例如： 1mW 的光功率根据公式就相当于0dBm的光功率，2mW的光功率就相当于3dBm的光功率；5mW的光功率就相当于7dBm的光功率；10mW的光功率就相当于10dBm的光功率；0.1mW的光功率就相当于-10dBm的光功率。
光损耗 光功率损耗L（光损耗）（dB）常用来规范光纤衰减，其单位为dB，计算公式为： 例如，已知光输出功率是0.1mW，光功率计连接到输出光缆的另一端时，光功率计测得的接收光功率是0.05mW，利用上述分贝功率损耗公式，可计算得出光纤损耗为 3dB。
光损耗速记:
 3dB 的光损耗相当于 50% 的光功率损耗（lg2=0.3） 7dB 的光损耗相当于 80% 的光功率损耗（lg5=0.7） 10dB 的光损耗相当于 90%的光功率损耗（lg10=1） 20dB 的光损耗相当于 99%的光功率损耗（lg100=2） 30dB 的光损耗相当于 99.9%的光功率损耗（Lg1000=3）  光模块 SFP SMALL FORM PLUGGABLE 的缩写，SFP封装光模块的传输速率有155M、1.25G、2.5G等，接口类型主要以 LC 接口为主，一般用在SONET/SDH网络、百兆/千兆以太网以及其他低速传输应用。
SFP+ SFP+与SFP外观尺寸相同，SFP+封装光模块的传输速率有6G、8G、10G等，采用该封装类型的有6G/8GFC光模块、10G光模块、10G电口模块、10G DAC高速线缆以及10G AOC有源光缆。SFP+系列产品主要用于数据中心10G（10GBASE-SR）以太网链路中。
SFP28 SFP28是SFP+的加强版，和SFP+具有相同的尺寸，但其能支持单通道25Gb/s的速率。</description>
    </item>
    
    <item>
      <title>在 PVE 中安装 HAOS</title>
      <link>https://www.tylinux.com/post/install_hassos_in_pve/</link>
      <pubDate>Wed, 30 Jun 2021 11:07:27 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/install_hassos_in_pve/</guid>
      <description> 创建 Linux 2.6-5.x 虚拟机，不使用 CD/DVD  勾上 Qemu Agent  硬盘随便选一个，反正等会儿要删掉  CPU/内存看着给，1C1G 或者 2C2G 应该就够了 添加一个网络设备  完成 在『Hardware』 中 rmeove 掉默认创建的硬盘 BIOS 改为 &amp;ldquo;OVMF(UEFI)&amp;rdquo;, 并新建一个 &amp;ldquo;EFI Disk&amp;rdquo;（如果没有的话） ssh 登录到 PVE 实例中，从 https://github.com/home-assistant/operating-system/releases/ 下载最新版本的 haos 镜像，主要选择 vmdk 版本的，比如 haos_ova-6.1.vmdk.zip。 解压下载好的镜像后，unzip解压， 然后 qm importdisk 10x haos_ova-6.1.vmdk local-lvm 这样，导入磁盘，注意替换 10x 为创建的 haos 虚拟机 id 在 『hardware』界面选择 unused Disk，编辑，添加，注意要改成 SATA  在 『options-Boot Order』 处，仅把 sata0 选中，去掉其他的设备。 开机  </description>
    </item>
    
    <item>
      <title>也折腾博云物联辣鸡网络摄像头（上）</title>
      <link>https://www.tylinux.com/post/hack_boyun_ipcamera_01/</link>
      <pubDate>Thu, 03 Jun 2021 00:54:26 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/hack_boyun_ipcamera_01/</guid>
      <description>相关资源文件可至：https://github.com/tylinux/HackBoyunIPCamera 下载
 前几天看了 用垃圾网络摄像头构建的家庭直播系统 这篇帖子，也想试着玩儿玩儿网络摄像头，就买了帖子里提到的 38 俩包邮的博云物联摄像头。
到手拆机：
 海思 HI3518CV100 的主控芯片 瑞昱 RTL8188ETV WiFi 模块 开搞。
TTL 第一步是先找到 TTL 接口，这样就能观察启动过程，刷完系统也好辨别是否工作正常，是哪里出了问题。 思路如下：
 找明确标记为 RX, TX 的测试点 找比较可疑的两个、三个、或者四个并排的测试点 终极方案：把主控吹下来，按照 datasheet 里标记的 RX，TX 引脚找对应的测试点  很幸运，板子背面就有三个一排的可疑测试点，推测可能就是 TTL 接口，用万用表很轻松找到 GND，RX，TX 则通过上电时的电压变化来区分，因为上电时 TX 会有比较多的信息要输出，所以电压变化会比较大。
按照猜想焊上，连接 PC，波特率 115200，上电验证，成功~
TTL 测试点定义：
 启动日志：
U-Boot 2010.06-dirty (Feb 06 2015 - 19:53:21) Check spi flash controller v350... Found Spi(cs1) ID: 0xEF 0x40 0x17 0x00 0x00 0x00 Spi(cs1): Block:64KB Chip:8MB Name:&amp;quot;W25Q64FV&amp;quot; In: serial Out: serial Err: serial Hit any key to stop autoboot: 0 8192 KiB hi_sfc at 0:0 is now current device ## Booting kernel from Legacy Image at 82000000 .</description>
    </item>
    
    <item>
      <title>Android 设备上使用 Termux 安装运行 gitlab-runner</title>
      <link>https://www.tylinux.com/post/install_gitlab_runner_on_android/</link>
      <pubDate>Wed, 19 May 2021 23:39:17 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/install_gitlab_runner_on_android/</guid>
      <description>安装 Termux  Termux: https://f-droid.org/packages/com.termux/ Termux-boot: https://f-droid.org/packages/com.termux.boot/  换源 Termux 默认软件源国内链接可能不顺畅，可以改用清华的源，如下：
1 2  # 执行如下命令更换三个源 termux-change-repo   安装并启用 sshd 该步骤主要是为了远程操作，避免在手机上大量输入。
1 2 3 4 5 6 7 8 9 10 11  # 安装 openssh apt install openssh termux-services # 启动 sshd sshd # 修改密码 passwd # 获取用户名 whoami   完成后执行 exit 关闭会话，重新打开 APP 后执行：
1 2 3  sv-enable sshd sv up sshd   使能 sshd 服务。</description>
    </item>
    
    <item>
      <title>CocoaPods 小坑一例</title>
      <link>https://www.tylinux.com/post/one_small_cocoapods_issue/</link>
      <pubDate>Mon, 17 May 2021 18:25:58 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/one_small_cocoapods_issue/</guid>
      <description>错误信息 [!] The &#39;Pods-xxx&#39; target has libraries with conflicting names: libflipper-rsocket.a. 背景信息 公司使用的是二进制化后的 pod，podspec 中使用 vendored_libraries 引入了 libFlipper-RSocket.a，然而在 pod install 的时候，出现了如上的错误，搜索一下，别人出现这个问题是两个不同的 pod 引用了相同的 .a 文件。但是我可以肯定我这里是没有这个问题的。
排查 根据报错的信息，找到源码位置：lib/cocoapods/installer/xcode/target_validator.rb，如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  def verify_no_duplicate_framework_and_library_names aggregate_targets.each do |aggregate_target| aggregate_target.user_build_configurations.each_key do |config| pod_targets = aggregate_target.pod_targets_for_build_configuration(config) file_accessors = pod_targets.flat_map(&amp;amp;:file_accessors).select { |fa| fa.spec.library_specification? } frameworks = file_accessors.</description>
    </item>
    
    <item>
      <title>翻车日记0: HP ElitePad 1000 G2 加装 USB 2.0 接口</title>
      <link>https://www.tylinux.com/post/add_usb_and_dc_power_for_hp_elite_pad_1000_g2/</link>
      <pubDate>Mon, 25 Jan 2021 19:20:58 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/add_usb_and_dc_power_for_hp_elite_pad_1000_g2/</guid>
      <description>文中记录的改装方法确认可以生效，翻车的是我这个个案
 前几日脑子一热，闲鱼入手一台 HP ElitePad 1000 G2 Windows 平板，单主机 199，加改装 DC 充电 260。这个平板很神奇，因为充电器接口使用的是 HP 自己的接口，所以充电器的价格几乎快和主机一个加钱了 ಥ_ಥ，所以入手了改装充电的套餐。
回来之后，感觉自带的 Windows 10 版本比较老，想升级一下系统，然后系统自带的更新不可用，还没有 USB 接口，闲鱼上有 SD 卡重装系统的教程，还特娘的要 30，感觉这平板不值钱，其他的都特娘的值钱。
所以，开始研究怎么特娘的给他加个 USB 接口（噩梦的开始）。
改装 USB 2.0 端口 拆开主机，取下屏幕，映入眼帘的是一块硕大的电池，娇小的主板，和一个过时的 3G 网卡： 这里的网卡型号是华为 MU736，按照文档所述，网卡接口是 M.2 Socket 2，具体来讲应该是 M.2 Socket 2 Key B，接口的主要功能包括：
 PCIe x2 / SATA /USB 2.0 / USB 3.0 / HSIC / SSIC / Audio / UIM / I2C
 再依据 M.2 Socket 2 Key B 的 pinout，可以确定 USB 2.</description>
    </item>
    
    <item>
      <title>利用逆向知识修复 『Jietu.app 』在 macOS Big Sur 下的崩溃问题</title>
      <link>https://www.tylinux.com/post/fix_jietu_crash_with_reverse_method/</link>
      <pubDate>Mon, 07 Dec 2020 19:14:09 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/fix_jietu_crash_with_reverse_method/</guid>
      <description>&lt;p&gt;腾讯开发的截图工具：&lt;a href=&#34;https://apps.apple.com/us/app/%E6%88%AA%E5%9B%BE-jietu-%E5%BF%AB%E9%80%9F%E6%A0%87%E6%B3%A8-%E4%BE%BF%E6%8D%B7%E5%88%86%E4%BA%AB%E7%9A%84%E6%88%AA%E5%B1%8F%E5%B7%A5%E5%85%B7/id1059334054?mt=12&#34;&gt;Jietu&lt;/a&gt; 一直是我在 macOS 下最喜欢的截图工具，不过在升级到 macOS 11 Big Sur 之后就 GG 了，区域截图的时候会崩溃。这 App 上次更新是在 3 年前，指望腾讯修复希望不大，正好这俩天有空，尝试自己定位解决一下问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iPhone SE 降级 iOS 13.2.3</title>
      <link>https://www.tylinux.com/post/downgrade-iOS-13-3-to-13-2-3/</link>
      <pubDate>Sun, 05 Jan 2020 01:11:06 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/downgrade-iOS-13-3-to-13-2-3/</guid>
      <description>&lt;p&gt;手头有部之前在咸鱼上 80 块购入的有 ID 的 iPhone SE，系统 iOS 13.1.2，使用 checkra1n 绕过了 iCloud Lock。今儿翻出来想玩玩儿 checkra1n，想都没想就升级到了最新的 iOS 13.3，升级结束才想起来，自 iOS 13.0 beta4 开始，Apple 修复了通过重命名 &lt;code&gt;Setup.app&lt;/code&gt; 的方式绕过 iCloud Lock 的漏洞，一试果然，重命名 &lt;code&gt;Setup.app&lt;/code&gt; 后，Home 键不响应，重启之后，文件系统自动恢复到修改之前。一番搜索无果，想起自己保存了自 iOS 12.4 开始的所有 APTicket，遂决定恢复到 iOS 13.2.3，中间碰到一点儿小问题，特此记录一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS 10.15.1 下编译 VirtualBox 6.1.0</title>
      <link>https://www.tylinux.com/post/build-virtualbox-on-macOS-10.15/</link>
      <pubDate>Sun, 29 Dec 2019 18:44:33 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/build-virtualbox-on-macOS-10.15/</guid>
      <description>&lt;p&gt;在 AMD CPU 的机器上安装黑苹果之后，能用的虚拟机软件基本只有 VirtualBox 了。虽然能用，但是性能差的让人抠脚。通常来讲，虚拟机软件会优先利用 CPU 的虚拟化特性，比如 Intel 的 &lt;code&gt;VT-X/VT-D&lt;/code&gt; 以及 AMD 的 &lt;code&gt;SVM&lt;/code&gt;，在硬件虚拟化不可用的时候，会使用纯软件模拟的方式运行 Guest 系统指令。macOS 截止目前，全部运行在 Intel 的 CPU 上，所以其虚拟化框架 &lt;code&gt;Hypervisor.framework&lt;/code&gt;，也全部是基于 Intel 的虚拟化指令实现，并没有兼容 AMD，这也是 &lt;code&gt;VMWare&lt;/code&gt; 等其他虚拟机软件无法在 AMD CPU 的黑苹果上运行的根本原因。&lt;/p&gt;
&lt;p&gt;VirtualBox 看起来没有强依赖 &lt;code&gt;Hypervisor.framework&lt;/code&gt;，因此在 AMD CPU 上也可以运行。但是这糟糕的性能让我怀疑它没有使用 &lt;code&gt;SVM&lt;/code&gt; 来运行虚拟机，而是纯软件模拟。为了一探究竟，我准备在 macOS 上自行编译 VirtualBox。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>喜提新开(you)发(xi)机</title>
      <link>https://www.tylinux.com/post/hackintosh-with-amd-ryzen-3700x/</link>
      <pubDate>Sun, 22 Dec 2019 00:42:33 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/hackintosh-with-amd-ryzen-3700x/</guid>
      <description>&lt;p&gt;上次配置的 AMD 黑苹果放到公司，替代 Macbook Pro 2015 做日常开发了，虽然主频只有 3.8Ghz，但是 8C16T，32GB 内存，性能还是吊打 Macbook Pro 的 2.2G 4C8T，16GB的。&lt;/p&gt;
&lt;p&gt;家里的老台式还是 2014 年的时候配置的，当时是通过开源夏令营获得了 4400 块的奖金。研究了好几天配置了一台 Core i5 4590 4C4T + 8GB 内存的 MATX 台式。虽然后来内存加到了 16GB, 也添加了 AMD RX470D 显卡，但在搞点儿开发的时候，还是有些力不从心。所以萌生了配置一台新设备的想法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS 下开发 51 单片机应用</title>
      <link>https://www.tylinux.com/post/develop-mcs51-on-macOS/</link>
      <pubDate>Fri, 27 Sep 2019 00:41:14 +0800</pubDate>
      
      <guid>https://www.tylinux.com/post/develop-mcs51-on-macOS/</guid>
      <description>&lt;p&gt;最近 DIY 之心又又又又复活了，翻出来吃灰多年的 51 开发板，重新学习一下 51。现在主力系统已经换成了 macOS，在折腾环境搭建的过程中，踩了一丢丢坑，特此记录一下。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React Native 疑难 Crash 一例</title>
      <link>https://www.tylinux.com/post/fix-a-react-native-crash-on-mutex/</link>
      <pubDate>Tue, 13 Aug 2019 15:23:40 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/fix-a-react-native-crash-on-mutex/</guid>
      <description>&lt;p&gt;我司客户端中使用了 React Native 0.54.3 版本，自接入开始，就出现了一类很诡异的 Crash，崩溃信息如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AMD Ryzen 1700 也吃黑苹果</title>
      <link>https://www.tylinux.com/post/hackintosh-with-amd-ryzen-1700/</link>
      <pubDate>Tue, 07 May 2019 19:10:39 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/hackintosh-with-amd-ryzen-1700/</guid>
      <description>&lt;p&gt;公司配发的笔记本是 &lt;code&gt;MacBook Pro 15&#39; Mid 2015&lt;/code&gt;，随着公司工程的逐步膨胀，老家伙干活越来越吃力。便有了组建一台黑苹果干编译这些脏活儿累活儿，笔记本就用来开会的想法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pwnable.tw 0x1 orw writeup</title>
      <link>https://www.tylinux.com/post/pwnable-0x01-orw/</link>
      <pubDate>Wed, 13 Feb 2019 20:56:55 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/pwnable-0x01-orw/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;地址：&lt;a href=&#34;https://pwnable.tw/challenge/#2&#34;&gt;https://pwnable.tw/challenge/#2&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>pwnable.tw 0x0 start writeup</title>
      <link>https://www.tylinux.com/post/pwnable-0x00-start/</link>
      <pubDate>Wed, 13 Feb 2019 01:42:41 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/pwnable-0x00-start/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;地址：&lt;a href=&#34;https://pwnable.tw/challenge/#1&#34;&gt;https://pwnable.tw/challenge/#1&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>在群晖中使用 Docker 安装 Jenkins</title>
      <link>https://www.tylinux.com/post/install-jenkins-with-docker-on-synology/</link>
      <pubDate>Sun, 30 Dec 2018 18:29:07 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/install-jenkins-with-docker-on-synology/</guid>
      <description>&lt;p&gt;之前家里的 Jenkins 是跑在媳妇儿的老戴尔笔记本上，平台跑一些 DDNS、Blog 自动更新以及 Github Mirros 的任务。有种杀机用牛刀的感觉，为了响应国家节能减排的号召 (:D，准备把 Jenkins 迁移到家里的黑群晖上。但在折腾的过程中碰到一些问题，特此记录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 futurerestore 从 iOS 11.1.2 升级至 11.3.1</title>
      <link>https://www.tylinux.com/post/upgrade-from-iOS-11-1-2-to-iOS-11-3-1-with-blob/</link>
      <pubDate>Thu, 12 Jul 2018 23:28:03 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/upgrade-from-iOS-11-1-2-to-iOS-11-3-1-with-blob/</guid>
      <description></description>
    </item>
    
    <item>
      <title>(译) 在 iOS 11.3 之后的系统中 remount RootFS 为可读写</title>
      <link>https://www.tylinux.com/post/Remount-rootfs-after-iOS-11-3/</link>
      <pubDate>Tue, 12 Jun 2018 02:30:48 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/Remount-rootfs-after-iOS-11-3/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文链接：https://media.weibo.cn/article?id=2309404245794218721506
作者：Xiaolong Bai and Min (Spark) Zheng @ Alibaba Security Lab
译者：tylinux
博客地址: &lt;a href=&#34;https://www.tylinux.com&#34;&gt;https://www.tylinux.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>dumpdecrypted.dylib 原理分析</title>
      <link>https://www.tylinux.com/post/how-dumpdecrypted-dylib-works/</link>
      <pubDate>Mon, 12 Mar 2018 20:56:08 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/how-dumpdecrypted-dylib-works/</guid>
      <description>&lt;p&gt;在 iOS 平台上，从 App Store 下载的 App 会被 Apple 使用 &lt;code&gt;FairPlay&lt;/code&gt; 技术加密，使得程序无法在其他未登录相同 AppleID 的设备上运行，起到 &lt;code&gt;DRM&lt;/code&gt; 的作用。这样的文件同样也无法使用 IDA Pro 等工具进行分析。不管是出于安全研究还是再次分发的目的，都需要获取未加密的二进制文件，这一过程俗称砸壳。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS 11.0 - 11.1.2 越狱插件安装指南</title>
      <link>https://www.tylinux.com/post/install-tweak-with-electra-on-ios11/</link>
      <pubDate>Wed, 07 Feb 2018 23:45:49 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/install-tweak-with-electra-on-ios11/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Electra 1.0 已经释出，包含 Cydia，下边的内容可能不适用于新版本的 Electra，仅供理解 Cydia 原理用。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>使用 Linux deploy 在 Android 设备上运行 Linux 发行版</title>
      <link>https://www.tylinux.com/post/run-linux-dist-on-android-with-linux-deploy/</link>
      <pubDate>Mon, 22 Jan 2018 18:14:48 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/run-linux-dist-on-android-with-linux-deploy/</guid>
      <description>&lt;p&gt;在学习 ARM 汇编的时候，需要在本地搭建 arm 环境，当时所用的方法是使用 QEMU 模拟树莓派。然而由于 QEMU 对树莓派支持有限，性能堪忧。昨天翻出 2013 时候淘的一部 LG GPro，突然想到可以在 Android 设备上跑个 Linux 发行版来解决这个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>搭建私有Cydia源</title>
      <link>https://www.tylinux.com/post/create-private-cydia-repo/</link>
      <pubDate>Tue, 22 Aug 2017 13:40:36 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/create-private-cydia-repo/</guid>
      <description>&lt;p&gt;在通过 &lt;code&gt;TheOS&lt;/code&gt; 完成 Tweak 的开发后，我们通常会执行 &lt;code&gt;make package install&lt;/code&gt; 命令来将 Tweak 安装到越狱设备上。但如果需要将 Tweak 部署到大量设备上，安装和更新都是一个问题。这个时候，我们可以通过部署私有的 Cydia 源来完成 Tweak 的安装和更新。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网易云音乐客户端逆向分析（1）</title>
      <link>https://www.tylinux.com/post/reverse-neteasemusic-001/</link>
      <pubDate>Wed, 19 Jul 2017 10:06:04 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/reverse-neteasemusic-001/</guid>
      <description>&lt;h2 id=&#34;获取webapp内容&#34;&gt;获取WebApp内容&lt;/h2&gt;
&lt;p&gt;进入&lt;code&gt;NeteaseMusic.app/Contents&lt;/code&gt;目录观察，早就听闻网易云音乐客户端是个Hybird App，那想必&lt;code&gt;Resources&lt;/code&gt;目录一定有相应的Web代码资源，ls后观察，在一堆图片文件里有个&lt;strong&gt;resources.pack&lt;/strong&gt;文件很显眼：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在macOS下高效使用命令行</title>
      <link>https://www.tylinux.com/post/live-under-console-on-macOS/</link>
      <pubDate>Wed, 31 Aug 2016 00:46:08 +0000</pubDate>
      
      <guid>https://www.tylinux.com/post/live-under-console-on-macOS/</guid>
      <description>&lt;p&gt;相对于Windows和Linux，macOS最吸引人的地方在于精致的图形界面与强大的命令行的完美结合。熟悉macOS历史的同学应该知道，macOS的内核衍生自FreeBSD，属于正统Unix。因此，macOS下的各种终端命令的参数格式都是BSD式，对于习惯了Linux参数格式的我来讲有些许不适用，好在有Homebrew的加持，可以很方便的改回到Linux方式：&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
